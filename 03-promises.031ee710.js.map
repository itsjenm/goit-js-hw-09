{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,kBAC/BE,EAASH,SAASC,cAAc,mBAChCG,EAAYJ,SAASC,cAAc,iBAC3BD,SAASC,cAAc,mBAuCrC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAEpBM,EAAO,C,SAAEP,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CA5CbR,EAAKiB,iBAAiB,UAEtB,SAA2BC,GAEzBA,EAAMC,iBAEN,IAAIC,EAAaC,SAASlB,EAAMmB,OAChC,MAAMC,EAAiBF,SAAShB,EAAUiB,OACpCE,EAAgBH,SAASjB,EAAOkB,OAMtC,IAAIG,EAEJ,IAAKA,EAAW,EAAGA,GAAYD,EAAeC,IAC5CnB,EAAcmB,EAAUL,GACrBM,MAAK,EAACnB,SAAEA,EAAUS,MAAAW,MACjB7B,EAAA8B,OAAgBC,QACd,uBAAqBtB,QAAiBoB,MAAU,IAInDG,OAAM,EAACvB,SAAEA,EAAUS,MAAAe,MAClBjC,EAAA8B,OAAgBI,QACd,sBAAoBzB,QAAiBwB,MAAU,IAKrDX,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import * as Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\nconst increment = document.querySelector('[name=\"step\"]');\nconst start = document.querySelector('[type=\"submit\"]');\n\n//Write a script that, when submitting the form, calls the createPromise(position, delay) function as many times as you entered in the amount field\\\n\nform.addEventListener('submit', submittedPromises);\n\nfunction submittedPromises(event) {\n  // get values from form inputs and save it to object every time event is called\n  event.preventDefault();\n\n  let firstDelay = parseInt(delay.value);\n  const incrementDelay = parseInt(increment.value);\n  const totalPromises = parseInt(amount.value);\n\n  // console.log(firstDelay)\n  // console.log(incrementDelay)\n  // console.log(amountOfPromise)\n\n  let position; //sequence number of promise\n\n  for (position = 1; position <= totalPromises; position++) {\n    createPromise(position, firstDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n      });\n\n    firstDelay += incrementDelay;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$increment","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","event","preventDefault","firstDelay","parseInt","value","incrementDelay","totalPromises","position1","then","delay1","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.031ee710.js.map"}