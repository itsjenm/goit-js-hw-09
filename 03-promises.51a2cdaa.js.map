{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,kBAC/BE,EAASH,SAASC,cAAc,mBAChCG,EAAYJ,SAASC,cAAc,iBAC3BD,SAASC,cAAc,mBA8CnC,SAASI,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,C,SAAEN,EAAUS,MAAAR,IAEpBM,EAAO,C,SAAEP,EAAUS,MAAAR,GAAQ,GAE5BA,EAAM,G,CAjDfR,EAAKiB,iBAAiB,UAGpB,SAA2BC,GAEvBA,EAAMC,iBAGN,IAAIC,EAAaC,SAASlB,EAAMmB,OAChC,MAAMC,EAAiBF,SAAShB,EAAUiB,OACpCE,EAAkBH,SAASjB,EAAOkB,OAOxC,IAAIG,EAGJ,IAPAC,QAAQC,IAAIP,GACZM,QAAQC,IAAIJ,GACZG,QAAQC,IAAIH,GAKPC,EAAW,EAAGA,GAAYD,EAAiBC,IAC9CnB,EAAcmB,EAAUL,GACrBQ,MAAK,EAACrB,SAAEA,EAAUS,MAAAa,MACjB/B,EAAAgC,OAAgBC,QACd,uBAAqBxB,QAAiBsB,OAExCH,QAAQC,IAAI,uBAAqBpB,QAAiBsB,MAAU,IAE7DG,OAAM,EAACzB,SAAEA,EAAUS,MAAAiB,MAClBnC,EAAAgC,OAAgBI,QAAQ,sBAAoB3B,QAAiB0B,OAC3DP,QAAMC,IAAI,sBAAoBpB,QAAe0B,MAAU,IAG3Db,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import * as Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\nconst increment = document.querySelector('[name=\"step\"]');\nconst start = document.querySelector('[type=\"submit\"]');\n\n\n\n//Write a script that, when submitting the form, calls the createPromise(position, delay) function as many times as you entered in the amount field\\\n\nform.addEventListener(\"submit\", submittedPromises)\n\n\n  function submittedPromises(event) {\n    // get values from form inputs and save it to object every time event is called \n      event.preventDefault();\n\n     \n      let firstDelay = parseInt(delay.value);\n      const incrementDelay = parseInt(increment.value);\n      const amountOfPromise = parseInt(amount.value);\n  \n\n      console.log(firstDelay)\n      console.log(incrementDelay)\n      console.log(amountOfPromise)\n\n      let position; //sequence number of promise\n    \n      \n      for (position = 1; position <= amountOfPromise; position++) {\n        createPromise(position, firstDelay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(\n              `✅ Fulfilled promise ${position} in ${delay}ms`\n            );\n            console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n            console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n          });\n    \n          firstDelay += incrementDelay\n        }\n      }\n\n\n\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$increment","$47d4ff9957288465$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","event","preventDefault","firstDelay","parseInt","value","incrementDelay","amountOfPromise","position1","console","log","then","delay1","Notify","success","catch","delay2","failure"],"version":3,"file":"03-promises.51a2cdaa.js.map"}