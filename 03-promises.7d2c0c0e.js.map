{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAQF,SAASC,cAAc,kBAC/BE,EAASH,SAASC,cAAc,mBAChCG,EAAYJ,SAASC,cAAc,iBAC3BD,SAASC,cAAc,mBA8CnC,SAASI,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUS,MAAAR,IAEpBM,EAAO,CAAEP,WAAUS,MAAAR,G,GAEpBA,E,IAjDTR,EAAKiB,iBAAiB,UAGpB,SAA2BC,GAEvBA,EAAMC,iBAGN,IASIC,EATAC,EAAaC,SAASnB,EAAMoB,OAC1BC,EAAiBF,SAASjB,EAAUkB,OACpCE,EAAgBH,SAASlB,EAAOmB,OAUtC,IAAKH,EAAW,EAAGA,GAAYK,EAAeL,IAC5Cd,EAAcc,EAAUC,GACrBK,MAAK,SAAAC,G,IAAGpB,EAAQoB,EAARpB,SAAUqB,EAAKD,EAALX,MACjBlB,EAAA+B,OAAgBC,QACd,uBAAwCC,OAAfxB,EAAS,QAAYwB,OAANH,EAAM,M,IAIjDI,OAAM,SAAAL,G,IAAGpB,EAAQoB,EAARpB,SAAU0B,EAAKN,EAALX,MAClBlB,EAAA+B,OAAgBK,QAAQ,sBAAuCH,OAAfxB,EAAS,QAAYwB,OAANE,EAAM,M,IAIvEZ,GAAcG,C","sources":["src/js/03-promises.js"],"sourcesContent":["import * as Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delay = document.querySelector('[name=\"delay\"]');\nconst amount = document.querySelector('[name=\"amount\"]');\nconst increment = document.querySelector('[name=\"step\"]');\nconst start = document.querySelector('[type=\"submit\"]');\n\n\n\n//Write a script that, when submitting the form, calls the createPromise(position, delay) function as many times as you entered in the amount field\\\n\nform.addEventListener(\"submit\", submittedPromises)\n\n\n  function submittedPromises(event) {\n    // get values from form inputs and save it to object every time event is called \n      event.preventDefault();\n\n     \n      let firstDelay = parseInt(delay.value);\n      const incrementDelay = parseInt(increment.value);\n      const totalPromises = parseInt(amount.value);\n  \n\n      // console.log(firstDelay)\n      // console.log(incrementDelay)\n      // console.log(amountOfPromise)\n\n      let position; //sequence number of promise\n    \n      \n      for (position = 1; position <= totalPromises; position++) {\n        createPromise(position, firstDelay)\n          .then(({ position, delay }) => {\n            Notiflix.Notify.success(\n              `✅ Fulfilled promise ${position} in ${delay}ms`\n            );\n            // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n          })\n          .catch(({ position, delay }) => {\n            Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n            // console.log(`❌ Rejected promise ${position} in ${delay}ms`)\n          });\n    \n          firstDelay += incrementDelay\n        }\n      }\n\n\n\n\n  function createPromise(position, delay) {\n    const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (shouldResolve) {\n          resolve({ position, delay });\n        } else {\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n  }"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delay","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$increment","$ce04d3a99e08e73b$var$createPromise","position","delay3","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","delay","addEventListener","event","preventDefault","position1","firstDelay","parseInt","value","incrementDelay","totalPromises","then","param","delay1","Notify","success","concat","catch","delay2","failure"],"version":3,"file":"03-promises.7d2c0c0e.js.map"}